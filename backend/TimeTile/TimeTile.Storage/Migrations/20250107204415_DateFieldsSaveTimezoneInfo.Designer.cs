// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TimeTile.Storage.Contexts;

#nullable disable

namespace TimeTile.Storage.Migrations
{
    [DbContext(typeof(TimetileDbContext))]
    [Migration("20250107204415_DateFieldsSaveTimezoneInfo")]
    partial class DateFieldsSaveTimezoneInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LessonStatusInstitution", b =>
                {
                    b.Property<int>("lesson_status_id")
                        .HasColumnType("integer");

                    b.Property<int>("institution_id")
                        .HasColumnType("integer");

                    b.HasKey("lesson_status_id", "institution_id")
                        .HasName("lesson_status_institution_pkey");

                    b.HasIndex("institution_id");

                    b.ToTable("lesson_statuses_institutions", (string)null);
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.Property<int>("permission_id")
                        .HasColumnType("integer");

                    b.HasKey("role_id", "permission_id")
                        .HasName("role_permissions_pkey");

                    b.HasIndex("permission_id");

                    b.ToTable("roles_permissions", (string)null);
                });

            modelBuilder.Entity("SubjectInstitution", b =>
                {
                    b.Property<int>("institution_id")
                        .HasColumnType("integer");

                    b.Property<int>("subject_id")
                        .HasColumnType("integer");

                    b.HasKey("institution_id", "subject_id")
                        .HasName("subjects_institutions_pkey");

                    b.HasIndex("subject_id");

                    b.ToTable("subjects_institutions", (string)null);
                });

            modelBuilder.Entity("TimeTile.Core.Models.AuditableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("auditable_entities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TimeTile.Core.Models.CourseToStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<int?>("ExamGradeId")
                        .HasColumnType("integer")
                        .HasColumnName("exam_grade_id");

                    b.Property<bool>("HasExam")
                        .HasColumnType("boolean")
                        .HasColumnName("has_exam");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("courses_students_pkey");

                    b.HasIndex("ExamGradeId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "CourseId", "StudentId" }, "courses_students_course_id_student_id_key")
                        .IsUnique();

                    b.ToTable("courses_students", null, t =>
                        {
                            t.HasCheckConstraint("CK_CoursesStudents_HasExam_ExamGrade", "\"has_exam\" = FALSE OR \"exam_grade_id\" IS NOT NULL");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.LessonToStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CameAt")
                        .HasColumnType("time with time zone")
                        .HasColumnName("came_at");

                    b.Property<int?>("ClassworkGradeId")
                        .HasColumnType("integer")
                        .HasColumnName("classwork_grade_id");

                    b.Property<int?>("HomeworkGradeId")
                        .HasColumnType("integer")
                        .HasColumnName("homework_grade_id");

                    b.Property<DateTimeOffset?>("LeftAt")
                        .HasColumnType("time with time zone")
                        .HasColumnName("left_at");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("lessons_students_pkey");

                    b.HasIndex("ClassworkGradeId")
                        .IsUnique();

                    b.HasIndex("HomeworkGradeId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "LessonId", "StudentId" }, "lessons_students_lesson_id_student_id_key")
                        .IsUnique();

                    b.ToTable("lessons_students", null, t =>
                        {
                            t.HasCheckConstraint("CHK_LessonToStudent_CameAt_IsNotNull_OR_CameAt_LeftAt_IsNull", "(\"came_at\" IS NULL AND \"left_at\" IS NULL) OR (\"came_at\" IS NOT NULL)");

                            t.HasCheckConstraint("CHK_LessonToStudent_CameAt_LessThan_LeftAt", "(\"came_at\" < \"left_at\") OR (\"left_at\" IS NULL)");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Classroom", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institution_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasIndex("InstitutionId", "Title")
                        .IsUnique()
                        .HasDatabaseName("classrooms_institution_title_key");

                    b.ToTable("classrooms", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Classroom_Title_Valid", "\"title\" ~ '^[a-zA-Z \\d-]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Course", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institution_id");

                    b.Property<bool>("IsAdvanced")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_advanced");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermId");

                    b.HasIndex("Title", "SubjectId", "TeacherId", "InstitutionId", "TermId")
                        .IsUnique()
                        .HasDatabaseName("courses_title_subject_teacher_institution_term_key");

                    b.ToTable("courses", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Course_Title_Valid", "\"title\"  ~ '^[\\w -.*+,]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Grade", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.Property<float>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f)
                        .HasColumnName("weight");

                    b.ToTable("grades", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Grade_Value_Positive", "\"value\" > 0");

                            t.HasCheckConstraint("CHK_Grade_Weight_Positive", "\"weight\" > 0");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Group", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institution_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasIndex("InstitutionId", "Title")
                        .IsUnique()
                        .HasDatabaseName("groups_institution_title_key");

                    b.ToTable("groups", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Group_Title_Valid", "\"title\"  ~ '^[\\w -.*]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Institution", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("institutions_title_key");

                    b.ToTable("institutions", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Institution_Address_NotEmpty", "\"address\" ~ '^[A-Za-z\\d''\\.\\- \\,]$'");

                            t.HasCheckConstraint("CHK_Institution_Email_Valid", "\"email\" ~ '^[A-Za-z\\d._%+-]+@[A-Za-z\\d.-]+\\.[A-Za-z]{2,}$'");

                            t.HasCheckConstraint("CHK_Institution_Phone_Valid", "\"phone_number\" ~ '^(\\+\\d{1,2} )?\\(?\\d{3}\\)?[ .-]\\d{3}[ .-]\\d{4}$'");

                            t.HasCheckConstraint("CHK_Institution_Title_NotEmpty", "\"title\" ~ '^[\\w \\-.*&\"'',\\/\\\\|]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Lesson", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("integer")
                        .HasColumnName("classroom_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("HomeworkDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("homework_description");

                    b.Property<int>("LessonStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_status_id");

                    b.Property<int>("TimetableUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("timetable_unit_id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("LessonStatusId");

                    b.HasIndex("TimetableUnitId");

                    b.HasIndex("CourseId", "TimetableUnitId", "Date")
                        .IsUnique()
                        .HasDatabaseName("lessons_course_timetable_date_key");

                    b.ToTable("lessons", (string)null);
                });

            modelBuilder.Entity("TimeTile.Core.Models.LessonStatus", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("lesson_statuses_description_key");

                    b.ToTable("lesson_statuses", null, t =>
                        {
                            t.HasCheckConstraint("CHK_LessonStatus_Description_Valid", "\"description\"  ~ '^[a-zA-Z\\d ]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Permission", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.HasIndex(new[] { "Description" }, "permissions_description_key")
                        .IsUnique();

                    b.ToTable("permissions", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Permission_Description_Valid", "\"description\"  ~ '^[\\w -]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Role", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institution_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasIndex(new[] { "InstitutionId", "Title" }, "roles_title_institution_key")
                        .IsUnique();

                    b.ToTable("roles", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Role_Title_Valid", "\"title\"  ~ '^[\\w -]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Subject", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasIndex(new[] { "Title" }, "subjects_title_key")
                        .IsUnique();

                    b.ToTable("subjects", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Subject_Title_Valid", "\"title\" ~ '^[\\w -]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Term", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institution_id");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasIndex("InstitutionId", "Title")
                        .IsUnique()
                        .HasDatabaseName("terms_institution_title_key");

                    b.HasIndex("StartDate", "EndDate", "InstitutionId")
                        .IsUnique()
                        .HasDatabaseName("terms_institution_start_end_key");

                    b.ToTable("terms", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Term_StartDate_LessThan_EndDate", "\"start_date\" < \"end_date\"");

                            t.HasCheckConstraint("CHK_Term_Title_Valid", "\"title\" ~ '^[\\w -.*+,]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.TimetableUnit", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("time with time zone")
                        .HasColumnName("end_time");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institution_id");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("time with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasIndex("InstitutionId", "Title")
                        .IsUnique()
                        .HasDatabaseName("timetable_units_institution_title_key");

                    b.HasIndex("InstitutionId", "Title", "StartTime", "EndTime")
                        .IsUnique()
                        .HasDatabaseName("timetable_units_institution_title_start_end_key");

                    b.ToTable("timetable_units", null, t =>
                        {
                            t.HasCheckConstraint("CHK_TimetableUnit_StartTime_LessThan_EndTime", "\"start_time\" < \"end_time\"");

                            t.HasCheckConstraint("CHK_TimetableUnit_Title_Valid", "\"title\" ~ '^[\\w ]+$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.User", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.AuditableEntity");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar_path");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstname");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("home_address");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institution_id");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastname");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(263)
                        .HasColumnType("character varying(263)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Login" }, "users_login_key")
                        .IsUnique();

                    b.ToTable("users", null, t =>
                        {
                            t.HasCheckConstraint("CHK_User_BirthDate_Valid", "\"birth_date\" <= NOW()");

                            t.HasCheckConstraint("CHK_User_Firstname_Valid", "\"firstname\" ~ '^[a-zA-Z ,.''-]+$'");

                            t.HasCheckConstraint("CHK_User_HomeAddress_Valid", "\"home_address\" ~ '^[A-Za-z\\d''\\.\\- \\,]$'");

                            t.HasCheckConstraint("CHK_User_Lastname_Valid", "\"lastname\" ~ '^[a-zA-Z ,.''-]+$'");

                            t.HasCheckConstraint("CHK_User_Login_Valid", "\"login\" ~ '^[\\w -]+$'");

                            t.HasCheckConstraint("CHK_User_PhoneNumber_Valid", "\"phone_number\" ~ '^(\\+\\d{1,2} )?\\(?\\d{3}\\)?[ .-]\\d{3}[ .-]\\d{4}$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Student", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.User");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Id", "GroupId")
                        .IsUnique()
                        .HasDatabaseName("students_id_group_key");

                    b.ToTable("students", null, t =>
                        {
                            t.HasCheckConstraint("CHK_User_BirthDate_Valid", "\"birth_date\" <= NOW()");

                            t.HasCheckConstraint("CHK_User_Firstname_Valid", "\"firstname\" ~ '^[a-zA-Z ,.''-]+$'");

                            t.HasCheckConstraint("CHK_User_HomeAddress_Valid", "\"home_address\" ~ '^[A-Za-z\\d''\\.\\- \\,]$'");

                            t.HasCheckConstraint("CHK_User_Lastname_Valid", "\"lastname\" ~ '^[a-zA-Z ,.''-]+$'");

                            t.HasCheckConstraint("CHK_User_Login_Valid", "\"login\" ~ '^[\\w -]+$'");

                            t.HasCheckConstraint("CHK_User_PhoneNumber_Valid", "\"phone_number\" ~ '^(\\+\\d{1,2} )?\\(?\\d{3}\\)?[ .-]\\d{3}[ .-]\\d{4}$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.Teacher", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.User");

                    b.ToTable("teachers", null, t =>
                        {
                            t.HasCheckConstraint("CHK_User_BirthDate_Valid", "\"birth_date\" <= NOW()");

                            t.HasCheckConstraint("CHK_User_Firstname_Valid", "\"firstname\" ~ '^[a-zA-Z ,.''-]+$'");

                            t.HasCheckConstraint("CHK_User_HomeAddress_Valid", "\"home_address\" ~ '^[A-Za-z\\d''\\.\\- \\,]$'");

                            t.HasCheckConstraint("CHK_User_Lastname_Valid", "\"lastname\" ~ '^[a-zA-Z ,.''-]+$'");

                            t.HasCheckConstraint("CHK_User_Login_Valid", "\"login\" ~ '^[\\w -]+$'");

                            t.HasCheckConstraint("CHK_User_PhoneNumber_Valid", "\"phone_number\" ~ '^(\\+\\d{1,2} )?\\(?\\d{3}\\)?[ .-]\\d{3}[ .-]\\d{4}$'");
                        });
                });

            modelBuilder.Entity("TimeTile.Core.Models.ClassTeacher", b =>
                {
                    b.HasBaseType("TimeTile.Core.Models.Teacher");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.HasIndex("GroupId");

                    b.ToTable("class_teachers", null, t =>
                        {
                            t.HasCheckConstraint("CHK_User_BirthDate_Valid", "\"birth_date\" <= NOW()");

                            t.HasCheckConstraint("CHK_User_Firstname_Valid", "\"firstname\" ~ '^[a-zA-Z ,.''-]+$'");

                            t.HasCheckConstraint("CHK_User_HomeAddress_Valid", "\"home_address\" ~ '^[A-Za-z\\d''\\.\\- \\,]$'");

                            t.HasCheckConstraint("CHK_User_Lastname_Valid", "\"lastname\" ~ '^[a-zA-Z ,.''-]+$'");

                            t.HasCheckConstraint("CHK_User_Login_Valid", "\"login\" ~ '^[\\w -]+$'");

                            t.HasCheckConstraint("CHK_User_PhoneNumber_Valid", "\"phone_number\" ~ '^(\\+\\d{1,2} )?\\(?\\d{3}\\)?[ .-]\\d{3}[ .-]\\d{4}$'");
                        });
                });

            modelBuilder.Entity("LessonStatusInstitution", b =>
                {
                    b.HasOne("TimeTile.Core.Models.Institution", null)
                        .WithMany()
                        .HasForeignKey("institution_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("lesson_status_institution_institution_id_fkey");

                    b.HasOne("TimeTile.Core.Models.LessonStatus", null)
                        .WithMany()
                        .HasForeignKey("lesson_status_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("lesson_status_institution_lesson_status_id_fkey");
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("TimeTile.Core.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("permission_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("role_permissions_permission_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("role_permissions_role_id_fkey");
                });

            modelBuilder.Entity("SubjectInstitution", b =>
                {
                    b.HasOne("TimeTile.Core.Models.Institution", null)
                        .WithMany()
                        .HasForeignKey("institution_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("subjects_institutions_institution_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("subjects_institutions_subject_id_fkey");
                });

            modelBuilder.Entity("TimeTile.Core.Models.CourseToStudent", b =>
                {
                    b.HasOne("TimeTile.Core.Models.Course", "Course")
                        .WithMany("CoursesToStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("courses_students_course_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Grade", "ExamGrade")
                        .WithOne("CourseToStudent")
                        .HasForeignKey("TimeTile.Core.Models.CourseToStudent", "ExamGradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("courses_students_exam_grade_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Student", "Student")
                        .WithMany("CoursesToStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("courses_students_student_id_fkey");

                    b.Navigation("Course");

                    b.Navigation("ExamGrade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TimeTile.Core.Models.LessonToStudent", b =>
                {
                    b.HasOne("TimeTile.Core.Models.Grade", "ClassworkGrade")
                        .WithOne("LessonToStudentClasswork")
                        .HasForeignKey("TimeTile.Core.Models.LessonToStudent", "ClassworkGradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("lessons_students_classwork_grade_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Grade", "HomeworkGrade")
                        .WithOne("LessonToStudentHomework")
                        .HasForeignKey("TimeTile.Core.Models.LessonToStudent", "HomeworkGradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("lessons_students_homework_grade_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Lesson", "Lesson")
                        .WithMany("LessonsToStudents")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("lessons_students_lesson_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Student", "Student")
                        .WithMany("LessonsToStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("lessons_students_student_id_fkey");

                    b.Navigation("ClassworkGrade");

                    b.Navigation("HomeworkGrade");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Classroom", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Classroom", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTile.Core.Models.Institution", "Institution")
                        .WithMany("Classrooms")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("classrooms_institution_id_fkey");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Course", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Course", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTile.Core.Models.Institution", "Institution")
                        .WithMany("Courses")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("courses_institution_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("courses_subject_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("courses_teacher_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Term", "Term")
                        .WithMany("Courses")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("courses_term_id_fkey");

                    b.Navigation("Institution");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Grade", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Grade", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTile.Core.Models.Group", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Group", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTile.Core.Models.Institution", "Institution")
                        .WithMany("Groups")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("groups_institution_id_fkey");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Institution", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Institution", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTile.Core.Models.Lesson", b =>
                {
                    b.HasOne("TimeTile.Core.Models.Classroom", "Classroom")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("lessons_classroom_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("lessons_course_id_fkey");

                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Lesson", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTile.Core.Models.LessonStatus", "LessonStatus")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("lessons_lesson_status_id_fkey");

                    b.HasOne("TimeTile.Core.Models.TimetableUnit", "TimetableUnit")
                        .WithMany("Lessons")
                        .HasForeignKey("TimetableUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("lessons_timetable_unit_id_fkey");

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("LessonStatus");

                    b.Navigation("TimetableUnit");
                });

            modelBuilder.Entity("TimeTile.Core.Models.LessonStatus", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.LessonStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTile.Core.Models.Permission", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Permission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTile.Core.Models.Role", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Role", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTile.Core.Models.Institution", "Institution")
                        .WithMany("Roles")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("roles_institution_id_fkey");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Subject", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Subject", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTile.Core.Models.Term", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Term", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTile.Core.Models.Institution", "Institution")
                        .WithMany("Terms")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("terms_institution_id_fkey");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("TimeTile.Core.Models.TimetableUnit", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.TimetableUnit", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTile.Core.Models.Institution", "Institution")
                        .WithMany("TimetableUnits")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("timetable_units_institution_id_fkey");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("TimeTile.Core.Models.User", b =>
                {
                    b.HasOne("TimeTile.Core.Models.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTile.Core.Models.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("users_institution_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("users_role_id_fkey");

                    b.Navigation("Institution");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Student", b =>
                {
                    b.HasOne("TimeTile.Core.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("students_group_id_fkey");

                    b.HasOne("TimeTile.Core.Models.User", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Teacher", b =>
                {
                    b.HasOne("TimeTile.Core.Models.User", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTile.Core.Models.ClassTeacher", b =>
                {
                    b.HasOne("TimeTile.Core.Models.Group", "Group")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("class_teachers_group_id_fkey");

                    b.HasOne("TimeTile.Core.Models.Teacher", null)
                        .WithOne()
                        .HasForeignKey("TimeTile.Core.Models.ClassTeacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Classroom", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Course", b =>
                {
                    b.Navigation("CoursesToStudents");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Grade", b =>
                {
                    b.Navigation("CourseToStudent");

                    b.Navigation("LessonToStudentClasswork");

                    b.Navigation("LessonToStudentHomework");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Group", b =>
                {
                    b.Navigation("ClassTeachers");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Institution", b =>
                {
                    b.Navigation("Classrooms");

                    b.Navigation("Courses");

                    b.Navigation("Groups");

                    b.Navigation("Roles");

                    b.Navigation("Terms");

                    b.Navigation("TimetableUnits");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Lesson", b =>
                {
                    b.Navigation("LessonsToStudents");
                });

            modelBuilder.Entity("TimeTile.Core.Models.LessonStatus", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Subject", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Term", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TimeTile.Core.Models.TimetableUnit", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Student", b =>
                {
                    b.Navigation("CoursesToStudents");

                    b.Navigation("LessonsToStudents");
                });

            modelBuilder.Entity("TimeTile.Core.Models.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
